var http = require("http");
var getdata=require("./GetData")
const request = require('request');
function make_requestt(api,post_data,method,cbk,cbk1){
var response_data={}
var options = {"method": method,"hostname": "127.0.0.1","port": "5350","path": api,"headers": {"content-type": "application/json",}};
var req = http.request(options, function (res) {
  var chunks = [];
  res.on("data", function (chunk) {
    chunks.push(chunk);
  });
  res.on("end", function () {
    var body = Buffer.concat(chunks);
	var response_data=body.toString();
	try{cbk(response_data)
	cbk1(response_data)}
	catch(e){}
  });
  });
req.write(JSON.stringify(post_data));
req.end();}

function make_the_request(api,post_data,method,cbk,cbk1){
var oth_fncts=["/end","/get_snapshot","/get_page_title","/get_page_source","/get_current_url","/reload","/keypress","/open","/scroll","/getresponse","/datakundapi"]
var api_present = oth_fncts.includes(api);
if(global.browser_opened==false && api_present==true)
	  {
		  setTimeout(function(){make_the_request(api,post_data,method,cbk,cbk1)},2000)
	  }
else{
var url="http://127.0.0.1:5350/"
url=url+api
post_data["tech_type"]="NPMJS"
post_data["indexnumber"]=global.indexnumber
var options={"method": method,"url": url,"headers": {"content-type": "application/json",},"body": post_data,"json": true};
request(options, (err, res, body) => {
	  if (err) { 
		  setTimeout(function(){make_the_request(api,post_data,method,cbk,cbk1)}, 1000)
		  }
	  else{
		  var response_data=body
		  try{
			  response_data=JSON.parse(response_data)
		  }
		  catch(e){}
		  try{
		  cbk(response_data)
		  cbk1(response_data)}
		  catch(e){}
		  }
});}
}
function edit_arguments(args,post_data){
	var arg_dic={}
	i=0
	for (arg in args){
		var argumnt=args[arg]
		var type=typeof argumnt
		if(type=="function"){
		}
		else{
		arg_dic[i.toString()]=argumnt
		post_data[i.toString()]=argumnt
		i++
		}
	}
	return arg_dic,post_data
}
let proxy = {
	get: function(target, prop, receiver) {
    var resdata={}
	var post_data={"indexnumber":global.indexnumber,"outputdata":[]}
	var botname=getdata.changebotname(prop,global.domain)
	userid=getdata.gettheuserid()
	post_data["user"]=userid
	post_data["bot"]=botname+"~D75HsPTUIeOmN0bLp5ulrwB7F1f2"
	var F = function(...args){
	}
	return new Proxy(F, {
			apply: function({}, thisArg, argumentsList) {
					post_data["outputdata"]=argumentsList
					var oth_fncs=["end","get_snapshot","get_page_title","get_page_source","get_current_url","reload","keypress","open","scroll","getresponse"]
					var if_present = oth_fncs.includes(prop);
					if(if_present ==true ){api_name="/"+prop
					var argumentsListt=argumentsList
					var edited_arguments={}
					edited_arguments,post_data=edit_arguments(argumentsListt,post_data)
					post_data["outputdata"]=edited_arguments}
					else{api_name="/datakundapi"}
					if(prop=="set_domain"){
						global.domain=argumentsList[0]
					}
					else{
					make_the_request(api_name,post_data,"POST",function(response){
					return response},argumentsList[argumentsList.length - 1])}
					                        
			}});
	},};
global.indexnumber=1
global.browser_opened=false
global.domain=""
let datakund = new Proxy({}, proxy);
function startbrowser(version,calbak2){
	console.log("Opening Browser...")
	make_the_request("/startbrowser",{"majorVersion":version,"browser":"chrome"},"POST",function(response){
						try{global.indexnumber=JSON.parse(response)["indexnumber"]}
						catch(e){
							global.indexnumber=response["indexnumber"]
						}
						global.browser_opened=true
						calbak2()
						},function(){})
}
function install(calbak1,calbak2){
	console.log("Importing...")
	console.log("Please wait till browser opened...")
	console.log("It may take some time...")
	userid=getdata.gettheuserid()
	getdata.getversion(function(version){make_the_request("/install",{"userid":userid,"browser":"chrome","majorVersion":version},"POST",function(response){calbak1(version,calbak2)},function(){})})
}
function install_dk(){
	install(startbrowser,function(){}
		)
		}
getdata.checkifinstall(install_dk)
module.exports = datakund